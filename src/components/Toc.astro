---
type Props = {
  headings: { depth: number; slug: string; text: string }[];
  color?: Color;
};

const { color = "primary", headings } = Astro.props;
---

<div
  class="sticky top-5 right-0 group -mt-14 ml-auto h-12 w-12 open-toc is-bottom"
>
  <button
    class={`text-${color}-900 bg-casper-100 relative rounded-full shadow-md p-2 w-12 h-12`}
    aria-label="ouvrir le menu de navigation"
  >
    <span
      class="absolute block transition-colors duration-150 ease-in-out w-[24.5px] h-[20px] top-[15px] left-[11px]"
    >
      <span
        class={`absolute h-0.5 bg-${color}-900 w-11/12 transition-all top-0 opacity-100 right-0 rotate-0 rounded-md`}
      ></span>
      <span
        class={`absolute h-0.5 bg-${color}-900 w-9/12 transition-all top-[8.8px] opacity-100 right-0 rotate-0 rounded-md`}
      ></span>
      <span
        class={`absolute h-0.5 bg-${color}-900 w-11/12 transition-all bottom-0 opacity-100 right-0 rotate-0 rounded-md`}
      >
      </span>
    </span>
  </button>
  <div
    class="max-w-full min-w-[92vw] w-auto md:min-w-[26rem] md:max-w-md flex flex-col absolute max-h-0 overflow-hidden transition-height duration-150 ease-in-out bg-slate-100 rounded-md shadow-md right-0 text-left toc-nav"
  >
    {
      headings.map((h) => (
        <a
          class={`ml-${
            3 * h.depth
          } no-underline text-base py-1 pr-3 first:mt-3 last:mb-3 toc-link`}
          href={`#${h.slug}`}
        >
          {h.text}
        </a>
      ))
    }
  </div>

  <style>
    .open-toc.is-active > button {
      @apply text-primary-700;
    }
    .open-toc.is-active div.toc-nav {
      @apply max-h-screen;
    }
    .open-toc div.toc-nav {
      @apply top-14;
    }
    .open-toc.is-bottom div.toc-nav {
      @apply -translate-y-full -top-1;
    }

    .open-toc.is-active > button > span span:nth-child(1) {
      @apply top-[9px] rotate-45;
    }
    .open-toc.is-active > button > span span:nth-child(2) {
      @apply opacity-0 -right-16;
    }
    .open-toc.is-active > button > span span:nth-child(3) {
      @apply top-[9px] -rotate-45;
    }
  </style>
  <script>
    // detect if .open-toc is at the bottom of viewport or not
    const openToc = document.querySelector(".open-toc");

    const debounce = (callback: Function, wait: number) => {
      let timeoutId: number | undefined;
      return (...args: any) => {
        window.clearTimeout(timeoutId);
        timeoutId = window.setTimeout(() => {
          callback.apply(null, args);
        }, wait);
      };
    };

    window.addEventListener(
      "scroll",
      debounce(() => {
        // get position top .openToc
        const openTocTop = openToc?.getBoundingClientRect().top;
        // get viewport height
        const vh = window.innerHeight;
        if (openTocTop && openTocTop > vh / 2) {
          openToc?.classList.add("is-bottom");
        } else {
          openToc?.classList.remove("is-bottom");
        }
      }, 200)
    );

    openToc?.addEventListener("click", (e) => {
      const target = e.currentTarget as HTMLElement;
      if (!target) return;
      target.classList.toggle("is-active");
    });
    // click out .open-top
    document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      if (!target) return;
      if (target.closest(".open-toc")) return;
      document.querySelector(".open-toc")?.classList.remove("is-active");
    });

    // smooth scroll to anchor
    const anchors = document.querySelectorAll('a[href*="#"]');
    anchors.forEach((anchor) => {
      anchor.addEventListener("click", function (e) {
        e.preventDefault();
        const target = e.currentTarget as HTMLAnchorElement;
        if (!target) return;
        const href = target.getAttribute("href");
        if (!href) return;
        document.querySelector(href)?.scrollIntoView({
          behavior: "smooth",
        });
      });
    });
  </script>
</div>
