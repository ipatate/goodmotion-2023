---
type Props = {
  width?: number;
  height?: number;
  size?: number;
};

const { width = 100, height = 100, size = 6 } = Astro.props;
---

<div
  class="relative flex items-center justify-center circle-wrapper transition-opacity duration-500 ease-in-out"
  style={`width: ${width}px; height:${height}px;opacity: 0`}
>
  <svg
    class="progressCircle"
    width={`${width}px`}
    height={`${height}px`}
    viewBox={`0 0 ${width} ${height}`}
  >
    <circle
      cx={width / 2}
      cy={width / 2}
      r={width / 2 - size - 0.2}
      fill="none"
      stroke-width={size}></circle>
    <circle
      cx={width / 2}
      cy={width / 2}
      r={width / 2 - size - 0.2}
      fill="none"
      stroke-width={size}
      stroke-dashoffset="0"
      pathLength="100"></circle>
  </svg>
  <slot />
</div>
<script>
  // get height of total scroll
  let scrollHeight = document.body.scrollHeight - window.innerHeight;
  // viewport height
  let vh = window.innerHeight;

  const circleWrapper: HTMLDivElement | null =
    document.querySelector(".circle-wrapper");
  const progressCircle: SVGElement | null =
    document.querySelector(".progressCircle");

  let resizeTicking = false;
  const onResize = () => {
    if (!resizeTicking) {
      window.requestAnimationFrame(() => {
        scrollHeight = document.body.scrollHeight - window.innerHeight;
        vh = window.innerHeight;
        resizeTicking = false;
      });
    }
    resizeTicking = true;
  };

  // throttle scroll event
  let ticking = false;
  const onScroll = () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        const scrollPosition = Math.round(
          (window.scrollY / scrollHeight) * 100
        );
        if (scrollHeight > vh && window.scrollY > vh && circleWrapper) {
          circleWrapper.style.opacity = "1";
        } else if (circleWrapper) {
          circleWrapper.style.opacity = "0";
        }
        if (progressCircle) {
          const circle: SVGCircleElement | null =
            progressCircle.querySelector("circle:last-child");
          if (circle)
            circle.style.strokeDashoffset =
              scrollPosition > 99.9 ? "0" : `${100 - scrollPosition}`;
        }
        ticking = false;
      });
    }
    ticking = true;
  };
  if (progressCircle) {
    window.addEventListener("scroll", onScroll);
  }
</script>
<style>
  svg.progressCircle {
    @apply -rotate-90 absolute;
  }

  svg.progressCircle circle:first-child {
    @apply stroke-gray-200;
  }

  svg.progressCircle circle:last-child {
    @apply stroke-accent-600;
    stroke-dasharray: 100;
    stroke-dashoffset: 0;
    transition: stroke-dashoffset 0.1s linear;
  }
</style>
